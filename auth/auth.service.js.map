{"version":3,"sources":["../../src/auth/auth.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n// src/auth/auth.service.ts\nimport { HttpCode, Inject, Injectable, HttpStatus } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from '../users/entities/user.entity';\nimport jwtConfig from '../config/jwt.config';\nimport { SignInDto } from './dto/sign-in.dto';\nimport { SignUpDto } from './dto/sign-up.dto';\nimport { HashingService } from './hashing.service';\nimport { ActiveUserData } from './interfaces/active-user-data.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(Users)\n    private readonly userRepository: Repository<Users>,\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType<typeof jwtConfig>,\n    private readonly hashingService: HashingService,\n  ) {}\n\n  async generateTokens(user: Users) {\n    const token = await this.signToken<Partial<ActiveUserData>>(user.id, {\n      name: user.name,\n    });\n    return { token };\n  }\n  private async signToken<T>(userId: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        expiresIn: this.jwtConfiguration.accessTokenTtl,\n      },\n    );\n  }\n\n  async signUp(signUpDto: SignUpDto) {\n    const { name, password } = signUpDto;\n\n    const existingUser = await this.userRepository.findOne({\n      where: [{ name }],\n    });\n    if (existingUser) throw new UnauthorizedException('用户名已重复');\n\n    const hashedPassword = await this.hashingService.hash(password);\n    const user = this.userRepository.create({\n      ...signUpDto,\n      password: hashedPassword,\n    });\n    return this.userRepository.save(user);\n  }\n\n  async signIn(signInDto: SignInDto) {\n    // TODO sign in\n    const { name, password } = signInDto;\n\n    const user = await this.userRepository.findOne({ where: { name } });\n    if (!user) throw new UnauthorizedException('用户不存在');\n\n    const isEqual = await this.hashingService.compare(password, user.password);\n    if (!isEqual) throw new UnauthorizedException('密码错误');\n    return this.generateTokens(user);\n  }\n}\n"],"names":["AuthService","generateTokens","user","token","signToken","id","name","userId","payload","jwtService","signAsync","sub","secret","jwtConfiguration","audience","issuer","expiresIn","accessTokenTtl","signUp","signUpDto","password","existingUser","userRepository","findOne","where","UnauthorizedException","hashedPassword","hashingService","hash","create","save","signIn","signInDto","isEqual","compare","constructor","Injectable","InjectRepository","Users","Inject","jwtConfig","KEY"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,oDAAoD,GACpD,2BAA2B;;;;;+BAedA;;;eAAAA;;;wBAd4C;qBAC9B;wBAEA;yBACM;0BACN;4BACL;kEACA;gCAGS;;;;;;;;;;;;;;;;;;;;AAIxB,IAAA,AAAMA,cAAN,MAAMA;IAUX,MAAMC,eAAeC,IAAW,EAAE;QAChC,MAAMC,QAAQ,MAAM,IAAI,CAACC,SAAS,CAA0BF,KAAKG,EAAE,EAAE;YACnEC,MAAMJ,KAAKI,IAAI;QACjB;QACA,OAAO;YAAEH;QAAM;IACjB;IACA,MAAcC,UAAaG,MAAc,EAAEC,OAAW,EAAE;QACtD,OAAO,MAAM,IAAI,CAACC,UAAU,CAACC,SAAS,CACpC;YACEC,KAAKJ;YACL,GAAGC,OAAO;QACZ,GACA;YACEI,QAAQ,IAAI,CAACC,gBAAgB,CAACD,MAAM;YACpCE,UAAU,IAAI,CAACD,gBAAgB,CAACC,QAAQ;YACxCC,QAAQ,IAAI,CAACF,gBAAgB,CAACE,MAAM;YACpCC,WAAW,IAAI,CAACH,gBAAgB,CAACI,cAAc;QACjD;IAEJ;IAEA,MAAMC,OAAOC,SAAoB,EAAE;QACjC,MAAM,EAAEb,IAAI,EAAEc,QAAQ,EAAE,GAAGD;QAE3B,MAAME,eAAe,MAAM,IAAI,CAACC,cAAc,CAACC,OAAO,CAAC;YACrDC,OAAO;gBAAC;oBAAElB;gBAAK;aAAE;QACnB;QACA,IAAIe,cAAc,MAAM,IAAII,6BAAqB,CAAC;QAElD,MAAMC,iBAAiB,MAAM,IAAI,CAACC,cAAc,CAACC,IAAI,CAACR;QACtD,MAAMlB,OAAO,IAAI,CAACoB,cAAc,CAACO,MAAM,CAAC;YACtC,GAAGV,SAAS;YACZC,UAAUM;QACZ;QACA,OAAO,IAAI,CAACJ,cAAc,CAACQ,IAAI,CAAC5B;IAClC;IAEA,MAAM6B,OAAOC,SAAoB,EAAE;QACjC,eAAe;QACf,MAAM,EAAE1B,IAAI,EAAEc,QAAQ,EAAE,GAAGY;QAE3B,MAAM9B,OAAO,MAAM,IAAI,CAACoB,cAAc,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAElB;YAAK;QAAE;QACjE,IAAI,CAACJ,MAAM,MAAM,IAAIuB,6BAAqB,CAAC;QAE3C,MAAMQ,UAAU,MAAM,IAAI,CAACN,cAAc,CAACO,OAAO,CAACd,UAAUlB,KAAKkB,QAAQ;QACzE,IAAI,CAACa,SAAS,MAAM,IAAIR,6BAAqB,CAAC;QAC9C,OAAO,IAAI,CAACxB,cAAc,CAACC;IAC7B;IAxDAiC,YACE,AACiBb,cAAiC,EAClD,AAAiBb,UAAsB,EACvC,AACiBI,gBAA8C,EAC/D,AAAiBc,cAA8B,CAC/C;aALiBL,iBAAAA;aACAb,aAAAA;aAEAI,mBAAAA;aACAc,iBAAAA;IAChB;AAkDL;AA1Da3B;IADZoC,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,yBAAgB,EAACC,iBAAK;IAGtBC,aAAAA,IAAAA,cAAM,EAACC,kBAAS,CAACC,GAAG;;;eAFY,oBAAU,4BAAV,oBAAU;eACd,eAAU,4BAAV,eAAU;eAEJ,kBAAU,4BAAV,kBAAU;eACZ,8BAAc,4BAAd,8BAAc;;GAPtCzC"}